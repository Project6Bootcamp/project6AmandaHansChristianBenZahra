{"version":3,"sources":["firebase.js","components/Header.js","components/UserMeme.js","components/DisplayMeme.js","components/Footer.js","components/MemeCreator.js","components/SearchGifs.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","state","headerText","subheaderText","id","className","this","props","Component","library","add","faThumbsDown","faThumbsUp","UserMeme","topText","bottomText","tags","image","alt","likes","dislikes","totalVotes","upVoteHandler","propertyKey","downVoteHandler","memeTags","replace","toLowerCase","memeAlt","memetopText","memebottomText","src","aria-label","onClick","icon","DisplayMeme","handleMemeInputChange","e","setState","userMemeSearch","target","value","handleMemeSubmit","preventDefault","elements","document","getElementsByClassName","i","length","style","display","nextElement","n","getElementById","querySelector","innerHTML","upVote","database","ref","child","update","memeLikes","memeTotalVotes","downVote","memeDislikes","ogMemeArray","on","data","firebaseDataObj","val","memeArray","formattedObj","memeTopText","memeBottomText","memeImage","memeAltText","date","memeDate","push","sort","a","b","Date","onSubmit","htmlFor","type","name","placeholder","required","onChange","to","map","eachMeme","Footer","href","MemeCreator","handleInputChangeTopText","userTopText","handleInputChangeBottomText","userBottomText","userGeneratedMemes","dbRef","time","userMemeTags","split","userMeme","gifUrlProps","gifAltProps","total","userMemes","marginTop","hideCreateMemeSection","closeMemeSection","clearMemeForm","action","maxLength","top","bottom","SearchGifs","handleInputChange","userInput","handleSubmit","giphyAPICall","query","axios","url","method","responseType","params","api_key","q","limit","rating","then","apiResponse","displayedGifs","images","downsized_large","giphyTrendingAPICall","passUrl","firstChild","gifUrl","gifAlt","eachGif","gifNum","tabIndex","title","onKeyPress","Home","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f0a332ed.chunk.js","sourcesContent":["// Core Firebase SDK:\r\nimport firebase from 'firebase/app';\r\n\r\n// Realtime database library.\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAlgZj6El4zcWxBFVZITap4Sy_BB9fEsgk\",\r\n    authDomain: \"meme-in-a-giffy-project6.firebaseapp.com\",\r\n    projectId: \"meme-in-a-giffy-project6\",\r\n    storageBucket: \"meme-in-a-giffy-project6.appspot.com\",\r\n    messagingSenderId: \"1028861060339\",\r\n    appId: \"1:1028861060339:web:0bf76cea4d32c4a2110386\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      headerText: \"\",\r\n      subheaderText: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header id='header'>\r\n\r\n        <div className='container projects'><h1>{this.props.headerText}</h1>\r\n\r\n          <div className=\"overlay\"></div>\r\n        </div>\r\n\r\n\r\n        <h2>{this.props.subheaderText}</h2>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faThumbsDown, faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faThumbsDown , faThumbsUp } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nlibrary.add(faThumbsDown, faThumbsUp);\r\n\r\n\r\nconst UserMeme = ({ topText, bottomText, tags, image, alt, likes, dislikes, totalVotes, upVoteHandler, propertyKey, downVoteHandler }) => {\r\n\r\n  let memeTags = `${tags}`.replace(/[^a-zA-Z]/g, \" \").toLowerCase();\r\n  let memeAlt = `${alt}`.replace(/[^a-zA-Z]/g, \" \").toLowerCase();\r\n  let memetopText = `${topText}`.replace(/[^a-zA-Z]/g, \" \").toLowerCase();\r\n  let memebottomText = `${bottomText}`.replace(/[^a-zA-Z]/g, \" \").toLowerCase();\r\n\r\n  return (\r\n    <li className={`eachMemeStyleContainer ${memeTags} ${memeAlt} ${memetopText} ${memebottomText} `}>\r\n\r\n      <div>\r\n        <p>{topText}</p>\r\n        <img src={image} alt={memeAlt} />\r\n        <p>{bottomText}</p>\r\n      </div>\r\n\r\n\r\n      <div className=\"voteButtons\">\r\n        <div>\r\n          <button className=\"totalBtn\">Total {totalVotes}</button>\r\n        </div>\r\n        <div className=\"buttonContainer\">\r\n          <button className=\"upVote\" aria-label=\"upvote this meme\" onClick={() => { upVoteHandler(propertyKey, likes, totalVotes) }} >\r\n            <p className=\"buttonText\">{likes}</p>\r\n            <FontAwesomeIcon icon={faThumbsUp} />\r\n          </button>\r\n\r\n          <button className=\"downVote\" aria-label=\"downvote this meme\" onClick={() => { downVoteHandler(propertyKey, dislikes, totalVotes) }} >\r\n            <p className=\"buttonText\">{dislikes}</p>\r\n            <FontAwesomeIcon icon={faThumbsDown} />\r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UserMeme;\r\n","import firebase from \"../firebase.js\";\r\nimport { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport UserMeme from \"../components/UserMeme.js\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faThumbsDown, faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faThumbsDown, faThumbsUp);\r\n\r\nclass DisplayMeme extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      ogMemeArray: [],\r\n      userMemeSearch: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebase.database().ref();\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (data) => {\r\n      const firebaseDataObj = data.val();\r\n\r\n      let memeArray = [];\r\n\r\n      for (let propertyKey in firebaseDataObj) {\r\n        const formattedObj = {\r\n          propertyKey: propertyKey,\r\n          topText: firebaseDataObj[propertyKey].memeTopText,\r\n          bottomText: firebaseDataObj[propertyKey].memeBottomText,\r\n          image: firebaseDataObj[propertyKey].memeImage,\r\n          alt: firebaseDataObj[propertyKey].memeAltText,\r\n          tags: firebaseDataObj[propertyKey].memeTags,\r\n          date: firebaseDataObj[propertyKey].memeDate,\r\n          likes: firebaseDataObj[propertyKey].memeLikes,\r\n          dislikes: firebaseDataObj[propertyKey].memeDislikes,\r\n          totalVotes: firebaseDataObj[propertyKey].memeTotalVotes,\r\n        };\r\n\r\n        memeArray.push(formattedObj);\r\n\r\n        memeArray.sort(callback);\r\n        function callback(a, b) {\r\n          return new Date(b.date) - new Date(a.date);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        ogMemeArray: memeArray,\r\n      });\r\n    });\r\n  }\r\n\r\n  handleMemeInputChange = (e) => {\r\n\r\n    this.setState({\r\n      userMemeSearch: e.target.value.toLowerCase(),\r\n    });\r\n  };\r\n\r\n  handleMemeSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let elements = document.getElementsByClassName(\"eachMemeStyleContainer\");\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].style.display = \"none\";\r\n    }\r\n\r\n    let nextElement = document.getElementsByClassName(\r\n      `${this.state.userMemeSearch}`\r\n    );\r\n    \r\n    for (let n = 0; n < nextElement.length; n++) {\r\n      nextElement[n].style.display = \"flex\";\r\n    }\r\n\r\n    document.getElementById(\"memeHeader\").querySelector(\".memeHeaderChange\").innerHTML = `${this.state.userMemeSearch}`;\r\n\r\n    this.setState({\r\n      userMemeSearch: \"\",\r\n    });\r\n\r\n    document.getElementById(\"memeSearch\").value = '';\r\n\r\n  };\r\n\r\n  upVote = (propertyKey, likes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeLikes: likes + 1,\r\n      memeTotalVotes: totalVotes + 1,\r\n    });\r\n  };\r\n\r\n  downVote = (propertyKey, dislikes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeDislikes: dislikes + 1,\r\n      memeTotalVotes: totalVotes - 1,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"fillScreen\">\r\n\r\n        <Header headerText=\"Meme in a Giffy\" subheaderText=\"\" />\r\n\r\n        <section className=\"wrapper\">\r\n\r\n          {/* Search Memes */}\r\n          <div className=\"flexboxSearchGifs\">\r\n            {/* div containing the search feature */}\r\n            <form className=\"flexbox searchGifForm\" id=\"memeSearchBar\" onSubmit={this.handleMemeSubmit}>\r\n              <label htmlFor=\"memeSearch\" className=\"srOnly\">Search for Meme:</label>\r\n              <input type=\"text\" id=\"memeSearch\" name=\"userMemeSearch\" placeholder=\"Find Memes\" required onChange={this.handleMemeInputChange} />\r\n              <button className=\"glow-on-hover searchGifButton\">Search</button>\r\n            </form>\r\n\r\n            {/* div containing button to navigate to meme search page */}\r\n            <div className=\"viewMemesButtonContainer\">\r\n\r\n              <Link to={\"/memecreator\"}>\r\n                <button className=\"glow-on-hover\" type=\"button\">Create New Meme</button>\r\n              </Link>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <h2 id=\"memeHeader\" className=\"gifHeader\"><span className=\"memeHeaderChange\">Most Recent</span> Memes</h2>\r\n\r\n          <ul className=\"eachMemeStyle flexbox\">\r\n            {this.state.ogMemeArray.map((eachMeme) => {\r\n              return (\r\n                <UserMeme\r\n                  propertyKey={eachMeme.propertyKey}\r\n                  topText={eachMeme.topText}\r\n                  bottomText={eachMeme.bottomText}\r\n                  image={eachMeme.image}\r\n                  alt={eachMeme.alt}\r\n                  tags={eachMeme.tags}\r\n                  likes={eachMeme.likes}\r\n                  dislikes={eachMeme.dislikes}\r\n                  totalVotes={eachMeme.totalVotes}\r\n                  upVoteHandler={this.upVote}\r\n                  downVoteHandler={this.downVote}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayMeme;\r\n","const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        {\"\\u00A9\"} | <a href=\"https://github.com/armontei\">Amanda Monteiro</a> | <a href=\"https://github.com/SarjeantDev\">Ben Sarjeant</a> | <a href=\"https://github.com/Hans-Christian\">Hans Christian Severino</a> | <a href=\"https://github.com/zahrapali\">Zahra Paliwalla</a> | {\" @ \"}<a href=\"https://junocollege.com/\">Juno College</a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","\r\nimport { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from '../firebase.js';\r\n\r\nclass MemeCreator extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userMemes:'',\r\n            userTopText: '',\r\n            userBottomText: '',\r\n            likes: 0,\r\n            dislikes: 0,\r\n            total: 0\r\n        }\r\n    }\r\n\r\n    // What gets added to the top of the image by the user\r\n    handleInputChangeTopText = (e) => {\r\n        this.setState({\r\n            userTopText: e.target.value\r\n        })\r\n    }\r\n\r\n    // What gets added to the bottom of the image by the user\r\n    handleInputChangeBottomText = (e) => {\r\n        this.setState({\r\n            userBottomText: e.target.value\r\n        })\r\n    }\r\n\r\n    userGeneratedMemes = (e) =>{\r\n        e.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        const time = document.getElementById('date').value = Date();\r\n\r\n        const userTagsInput = this.tags.value;\r\n        const userMemeTags = userTagsInput.split(/[\\s,]+/);\r\n\r\n        // The data that gets pushed to the firebase database\r\n        const userMeme = {\r\n            memeImage:this.props.gifUrlProps,\r\n            memeAltText:this.props.gifAltProps,\r\n            memeDate:time,\r\n            memeTopText:this.topText.value,\r\n            memeBottomText:this.bottomText.value,\r\n            memeTags:userMemeTags,\r\n            memeLikes:this.state.likes,\r\n            memeDislikes: this.state.dislikes, \r\n            memeTotalVotes:this.state.total,\r\n        }\r\n\r\n        this.topText.value = ''\r\n        this.bottomText.value = ''\r\n        this.tags.value = ''\r\n\r\n        dbRef.push(userMeme);\r\n\r\n        this.setState({\r\n            userMemes:userMeme,\r\n        })\r\n\r\n        // clear the elements associated with the create meme page and display the button allowing user to view created meme\r\n        // fires when user submits their created meme\r\n        document.getElementById(\"selectedGif\").style.display = \"none\";\r\n        document.getElementById(\"createMemeForm\").style.display = \"none\";\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('postCreationMeme').style.display = 'flex';\r\n    }\r\n\r\n    // function to hide the create meme section. function fires when user selects anywhere on the screen that is NOT in the create meme section\r\n    hideCreateMemeSection = (e) => {\r\n        if (e.target.id === \"createMemeSection\") {\r\n            this.closeMemeSection();\r\n        }\r\n    }\r\n\r\n    // function that runs to hide everything create meme related, and show everything that's relevant to the search gif page, fires when user selects the X button\r\n    closeMemeSection = () => {\r\n        document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n        document.getElementById('header').style.display = 'block';\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n    }\r\n\r\n    clearMemeForm = () =>{\r\n        document.getElementById(\"selectedGif\").style.display = \"none\";\r\n        document.getElementById(\"createMemeForm\").style.display = \"none\";\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('postCreationMeme').style.display = 'block';\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"createMemeSection\" id=\"createMemeSection\" onClick={this.hideCreateMemeSection}>\r\n\r\n                <div className=\"wrapperCreateMemePage\">\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"closeMemeButton\" onClick={this.closeMemeSection}>X</button>\r\n                    </div>\r\n\r\n                    <div className=\"gifAndForm\" id=\"gifAndForm\">\r\n\r\n                        <div className=\"selectedGif\" id=\"selectedGif\">\r\n                            <h5 className=\"memeText memeTextTop\">{this.state.userTopText}</h5>\r\n                            <img src={this.props.gifUrlProps} alt={this.props.gifAltProps} />\r\n                            <h5 className=\"memeText memeTextBottom\">{this.state.userBottomText}</h5>\r\n                        </div>\r\n\r\n                        {/* post creation screen - gets displayed after user submits meme */}\r\n                        <div className=\"postCreationMeme\" id=\"postCreationMeme\">\r\n                            <p className=\"creatingMemeText\">⚙ Creating Your Meme Now ⚙</p>\r\n                            <Link to={\"/search\"}>                         \r\n                                <button className=\"glow-on-hover searchGifButton\" type=\"button\">\r\n                                    View your Meme!\r\n                                </button>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <form action=\"\" onSubmit={this.userGeneratedMemes}                      \r\n                        className=\"createMemeForm\" id=\"createMemeForm\">\r\n\r\n                            <input id=\"date\" name=\"date\" className=\"hiddenDate\"></input>\r\n\r\n                            <label htmlFor=\"topText\">Top Text</label>\r\n                            <input type=\"text\" id=\"topText\" className=\"userInput\" required placeholder=\"Top Text\" maxLength=\"30\" ref={top => this.topText = top} onChange={this.handleInputChangeTopText}/>\r\n\r\n                            <label htmlFor=\"bottomText\">Bottom Text</label>\r\n                            <input type=\"text\" id=\"bottomText\" className=\"userInput\" required placeholder=\"Bottom Text\" maxLength=\"30\" ref={bottom => this.bottomText = bottom} onChange={this.handleInputChangeBottomText}/>\r\n\r\n                            <label htmlFor=\"tags\">Tags</label>\r\n                            <input type=\"text\" id=\"tags\" className=\"userInput\" required placeholder=\"Separate tags by commas or spaces\" ref={tags => this.tags = tags} />\r\n\r\n                            <input type=\"submit\" className=\"submit\" value=\"Submit!\" ></input>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeCreator;\r\n","// SearchGifs Class Component\r\n// Functionality: This component is used to get the results from a Giphy API call and allow the user to create a meme using one of the returned gifs.\r\n\r\n// importing npm installs\r\nimport { Component, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n// importing created pages & styles\r\nimport MemeCreator from \"./MemeCreator.js\";\r\nimport Header from \"./Header.js\";\r\nimport \"../styles/App.scss\";\r\n\r\nclass SearchGifs extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: \"\",\r\n            displayedGifs: [],\r\n            gifUrl: [],\r\n            gifAlt: [],\r\n        }\r\n    }\r\n\r\n    // On mount, run axios (api call) function to display all the currently trending Gifs\r\n    componentDidMount() {\r\n        this.giphyTrendingAPICall();\r\n    }\r\n\r\n    // When search field (Search Gifs Field) is being used, update state to record string value\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    // When user submits search query by pressing button (Find Gif Button), run axios (giphyAPICall) function that takes the userInput value from the search field and uses it in the api query field\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.giphyAPICall(this.state.userInput);\r\n\r\n        // functionality to make search disappear after search submit\r\n        document.getElementById(\"gifHeader\").querySelector(\".gifHeaderChange\").innerHTML = `${this.state.userInput}`;\r\n        this.setState({\r\n            userInput: \"\",\r\n        });\r\n        document.getElementById(\"userGifSearch\").value = '';\r\n    }\r\n\r\n    // api call to GIPHY that gets returns based off of a user search query (the userInput state), this api function gets fired off of the user submitting their search \r\n    giphyAPICall = (query) => {\r\n        axios({\r\n            url: \"https://api.giphy.com/v1/gifs/search\",\r\n            method: \"GET\",\r\n            responseType: \"json\",\r\n            params: {\r\n                api_key: \"AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa\",\r\n                q: query,\r\n                limit: 50,\r\n                rating: \"g\"\r\n            }\r\n        }).then((apiResponse) => {\r\n            // conditional statement to handle error of no gifs being found from query. errorMsgGifObj is a array of objects in the same structure as the return from the api call, creating this structure replica allows the map function in the render lifecycle to iterate with no problems\r\n            if (apiResponse.data.data.length === 0) {\r\n                const errorMsgGifObj = [{\r\n                    id: \"123ABC\",\r\n                    images: {\r\n                        downsized_large: {\r\n                            url: \"https://media1.giphy.com/media/gfO3FcnL8ZK9wVgr6t/giphy.gif?…0f423ee6unrij1gzkfdf27jyfmh9v3oxbgftbq88ajrpq0&rid=giphy.gif\"\r\n                        }\r\n                    }\r\n                }]\r\n\r\n                this.setState({\r\n                    displayedGifs: errorMsgGifObj\r\n                })\r\n\r\n                // else statement catching results from api call and storing result in the displayed Gifs state\r\n            } else {\r\n                this.setState({\r\n                    displayedGifs: apiResponse.data.data,\r\n                })\r\n            }\r\n        })\r\n    }\r\n    // end of query based api call\r\n\r\n\r\n    // api call to GIPHY that returns the top 12 gifs that are trending from Giphy right now\r\n    giphyTrendingAPICall = () => {\r\n        axios({\r\n            url: \"https://api.giphy.com/v1/gifs/trending\",\r\n            method: \"GET\",\r\n            responseType: \"json\",\r\n            params: {\r\n                api_key: \"AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa\",\r\n                limit: 12,\r\n                rating: \"g\"\r\n            }\r\n        }).then((apiResponse) => {\r\n            // storing result in the displayedGif state\r\n            this.setState({\r\n                displayedGifs: apiResponse.data.data\r\n            })\r\n        })\r\n    }\r\n    // end of trending api call\r\n\r\n\r\n    // function which passes the url as a state to the MemeCreator component called in the render lifecycle. function also hides certain aspects of the page while displaying the create meme modal\r\n    passUrl = (e) => {\r\n\r\n        // conditional statement to get the src of the gif regardless of if the user is clicking on the li containing the image or the image itself\r\n        if (e.target.firstChild != null) {\r\n            this.setState({\r\n                gifUrl: e.target.firstChild.src,\r\n                gifAlt: e.target.firstChild.alt\r\n            })\r\n        } else {\r\n            this.setState({\r\n                gifUrl: e.target.src,\r\n                gifAlt: e.target.alt\r\n            })\r\n        }\r\n\r\n        // displaying divs containing create meme page\r\n        document.getElementById(\"createMemeSection\").style.display = \"flex\";\r\n        document.getElementById(\"selectedGif\").style.display = \"flex\";\r\n        document.getElementById(\"createMemeForm\").style.display = \"flex\";\r\n\r\n        // hiding search and navigation bar when create meme page pops up\r\n        document.getElementById(\"searchGifId\").style.display = \"none\";\r\n        document.getElementById(\"header\").style.display = \"none\";\r\n        document.getElementById(\"postCreationMeme\").style.display = \"none\";\r\n        document.getElementById(\"displayedGifsId\").style.marginTop = 0;\r\n    }\r\n\r\n\r\n    // render statment loading content onto the page.\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Header headerText=\"Meme in a Giffy\" />\r\n\r\n                {/* Calling the component MemeCreator to allow user to create their own Meme\r\n                - passes component the url and the alt text of the gif  \r\n                    **this is not visible until a user actually clicks a gif */}\r\n                <MemeCreator gifUrlProps={this.state.gifUrl} gifAltProps={this.state.gifAlt} />\r\n\r\n                <section className=\"wrapper\">\r\n\r\n                    {/* Div containing the search/navigation bar above displayed gifs */}\r\n                    <div className=\"flexboxSearchGifs\" id=\"searchGifId\">\r\n                        {/* div containing the search feature */}\r\n                        <form onSubmit={this.handleSubmit} className=\"flexbox searchGifForm\">\r\n                            <label htmlFor=\"userGifSearch\" className=\"srOnly\">Search for Gif:</label>\r\n                            <input type=\"text\" id=\"userGifSearch\" name=\"userGifSearch\" placeholder=\"Search Gifs\" onChange={this.handleInputChange} required />\r\n                            <button className=\"glow-on-hover searchGifButton\">Find Gif</button>\r\n                        </form>\r\n\r\n                        {/* div containing button to navigate to meme search page */}\r\n                        <div className=\"viewMemesButtonContainer\">\r\n\r\n                            <Link to={\"/search\"}>\r\n                                <button className=\"glow-on-hover\" type=\"button\">View Created Memes</button>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* H2 updating everytime new search has been performed */}\r\n                    <h2 id=\"gifHeader\" className=\"gifHeader\"><span className=\"gifHeaderChange\">Trending</span> Gifs</h2>\r\n\r\n                    {/* Ul containing all gifs */}\r\n                    <ul className=\"gifs flexbox\" id=\"displayedGifsId\">\r\n\r\n                        {\r\n                            // mapping over the state containing which is set from axios (api call)\r\n                            this.state.displayedGifs.map((eachGif, gifNum) => {\r\n\r\n                                // Conditional statement for error handling if no results are found after a user searches, adds additional text to the page that the regular render wouldn't display\r\n                                if (eachGif.id === \"123ABC\") {\r\n                                    return (\r\n                                        <li tabIndex={gifNum} className=\"gifContainer noPointer\" key={eachGif.id}>\r\n                                            <p className=\"noGifFoundText\">Sorry No GIFs found, search again!</p>\r\n                                            <img src={eachGif.images.downsized_large.url} alt={eachGif.title} />\r\n                                        </li>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <li tabIndex={gifNum} className=\"gifContainer normalPointer\" key={eachGif.id} onClick={this.passUrl} onKeyPress={this.passUrl}>\r\n                                            <img src={eachGif.images.downsized_large.url} alt={eachGif.title} />\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            })\r\n                            // end of map statement\r\n                        }\r\n\r\n                    </ul>\r\n\r\n                </section>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchGifs;\r\n","import { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"fillScreen\">\r\n\r\n        <div className=\"fixHeaderText\">\r\n          <Header headerText=\"Meme in a Giffy\" subheaderText=\"\" />\r\n        </div>\r\n\r\n        <main className=\"landingPageHome\">\r\n\r\n          <Link to={\"/search\"}>\r\n            <button className=\"glow-on-hover homeButton\" type=\"button\">\r\n              Search Memes!\r\n          </button>\r\n          </Link>\r\n\r\n          <Link to={\"/memecreator\"}>\r\n            <button className=\"glow-on-hover homeButton\" type=\"button\">\r\n              Create Memes!\r\n          </button>\r\n          </Link>\r\n\r\n        </main>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./styles/App.scss\";\r\nimport DisplayMeme from \"./components/DisplayMeme\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport SearchGifs from \"./components/SearchGifs.js\";\r\nimport Home from \"./components/Home\";\r\n\r\n/* \r\nComponents to create: \r\nMeme Creation Page\r\n  - User query to get results and display images\r\n    - if no results get found let user know\r\n  - Limit results to 10 \r\n  - When user selects Gif to create meme, window pops open with form and gif\r\n  Custom Meme Component\r\n  - Form has three inputs *all required, and submit button \r\n    - Top text, bottom text, tag(s)\r\n  - On submit, prevent default behaviour and display on page \r\n    - Redirect user to the meme viewing section \r\n    \r\n    \r\nMeme Viewing Section:\r\n  Component for Customized Finished Meme:   \r\n      - User can upvotebpm / downvote\r\n        - Total votes are displayed\r\n      - Save meme for later ( STRETCH GOAL )\r\n  Gallery View on Meme Viewing Section: \r\n    - User query based off of title and tags entered during meme creation \r\n    - display memes onto page based off of the search query above\r\n    - \r\n*/\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/memecreator\" component={SearchGifs} />\r\n        <Route path=\"/search\" component={DisplayMeme} />\r\n\r\n        <Footer />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}