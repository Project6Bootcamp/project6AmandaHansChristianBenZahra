{"version":3,"sources":["firebase.js","components/Header.js","components/MemeCreator.js","components/UserMeme.js","components/DisplayMeme.js","components/Footer.js","components/SearchGifs.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","state","headerText","subheaderText","this","props","Component","MemeCreator","handleInputChangeTopText","e","setState","userTopText","target","value","handleInputChangeBottomText","userBottomText","userGeneratedMemes","preventDefault","dbRef","database","ref","time","document","getElementById","Date","userMemeTags","tags","split","userMeme","memeImage","gifUrlProps","memeAltText","gifAltProps","memeDate","memeTopText","topText","memeBottomText","bottomText","memeTags","memeLikes","likes","memeDislikes","dislikes","memeTotalVotes","total","push","userMemes","hideCreateMemeSection","id","style","display","marginTop","window","removeEventListener","stopScroll","closeMemeSection","className","onClick","src","alt","action","onSubmit","name","htmlFor","type","required","placeholder","maxLength","top","onChange","bottom","library","add","faThumbsDown","faThumbsUp","UserMeme","image","totalVotes","upVoteHandler","propertyKey","downVoteHandler","replace","memeAlt","memetopText","memebottomText","clasName","aria-label","icon","DisplayMeme","upVote","child","update","downVote","ogMemeArray","on","data","firebaseDataObj","val","memeArray","formattedObj","date","sort","a","b","elements","getElementsByClassName","i","length","nextElement","n","map","eachMeme","Footer","href","SearchGifs","handleInputChange","userInput","handleSubmit","giphyAPICall","query","axios","url","method","responseType","params","api_key","q","limit","rating","then","apiResponse","displayedGifs","images","downsized_large","console","log","giphyTrendingAPICall","passUrl","gifUrl","gifAlt","addEventListener","noScroll","scrollTo","trendingGif","title","Home","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.84d9e5ed.chunk.js","sourcesContent":["// Core Firebase SDK:\r\nimport firebase from 'firebase/app';\r\n\r\n// Realtime database library.\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAlgZj6El4zcWxBFVZITap4Sy_BB9fEsgk\",\r\n    authDomain: \"meme-in-a-giffy-project6.firebaseapp.com\",\r\n    projectId: \"meme-in-a-giffy-project6\",\r\n    storageBucket: \"meme-in-a-giffy-project6.appspot.com\",\r\n    messagingSenderId: \"1028861060339\",\r\n    appId: \"1:1028861060339:web:0bf76cea4d32c4a2110386\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","\r\nimport { Component } from \"react\";\r\n\r\n\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      headerText: \"\",\r\n      subheaderText: \"\",\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1>{this.props.headerText}</h1>\r\n        <h2>{this.props.subheaderText}</h2>\r\n      </header>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Header;\r\n","\r\nimport { Component } from 'react';\r\nimport firebase from '../firebase.js';\r\n\r\nclass MemeCreator extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userMemes:'',\r\n            userTopText: '',\r\n            userBottomText: '',\r\n            likes: 0,\r\n            dislikes: 0,\r\n            total: 0\r\n        }\r\n    }\r\n\r\n    handleInputChangeTopText = (e) => {\r\n        this.setState({\r\n            userTopText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleInputChangeBottomText = (e) => {\r\n        this.setState({\r\n            userBottomText: e.target.value\r\n        })\r\n    }\r\n\r\n    userGeneratedMemes = (e) =>{\r\n        e.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        const time = document.getElementById('date').value = Date();\r\n\r\n        const userTagsInput = this.tags.value;\r\n        const userMemeTags = userTagsInput.split(/[\\s,]+/);\r\n        const userMeme = {\r\n            memeImage:this.props.gifUrlProps,\r\n            memeAltText:this.props.gifAltProps,\r\n            memeDate:time,\r\n            memeTopText:this.topText.value,\r\n            memeBottomText:this.bottomText.value,\r\n            memeTags:userMemeTags,\r\n            memeLikes:this.state.likes,\r\n            memeDislikes: this.state.dislikes, \r\n            memeTotalVotes:this.state.total,\r\n        }\r\n\r\n        this.topText.value = ''\r\n        this.bottomText.value = ''\r\n        this.tags.value = ''\r\n\r\n        dbRef.push(userMeme);\r\n\r\n        this.setState({\r\n            userMemes:userMeme,\r\n        })\r\n    }\r\n\r\n    hideCreateMemeSection = (e) => {\r\n        if (e.target.id === \"createMemeSection\") {\r\n            document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n            document.getElementById('displayedGifsId').style.marginTop = '20px'; \r\n            window.removeEventListener('scroll', this.props.stopScroll);\r\n            document.getElementById('searchGifId').style.display = 'flex';\r\n        }\r\n    }\r\n\r\n    closeMemeSection = () => {\r\n        document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        window.removeEventListener('scroll', this.props.stopScroll);\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"createMemeSection\" id=\"createMemeSection\" onClick={this.hideCreateMemeSection}>\r\n\r\n                <div className=\"wrapperCreateMemePage\">\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"closeMemeButton\" onClick={this.closeMemeSection}>X</button>\r\n                    </div>\r\n\r\n                    <div className=\"gifAndForm\">\r\n\r\n                        <div className=\"selectedGif\">\r\n                            <h5 className=\"memeText memeTextTop\">{this.state.userTopText}</h5>\r\n                            <img src={this.props.gifUrlProps} alt={this.props.gifAltProps} />\r\n                            <h5 className=\"memeText memeTextBottom\">{this.state.userBottomText}</h5>\r\n                        </div>\r\n\r\n                        <form action=\"\" onSubmit={this.userGeneratedMemes} className=\"createMemeForm\">\r\n\r\n                            <input className=\"srOnly\" id=\"date\" name=\"date\" className=\"hiddenDate\"></input>\r\n\r\n                            <label htmlFor=\"topText\">Top Text</label>\r\n                            <input type=\"text\" id=\"topText\" className=\"userInput\" required placeholder=\"Top Text\" maxLength=\"30\" ref={top => this.topText = top} onChange={this.handleInputChangeTopText}/>\r\n\r\n                            <label htmlFor=\"bottomText\">Bottom Text</label>\r\n                            <input type=\"text\" id=\"bottomText\" className=\"userInput\" required placeholder=\"Bottom Text\" maxLength=\"30\" ref={bottom => this.bottomText = bottom} onChange={this.handleInputChangeBottomText}/>\r\n\r\n                            <label htmlFor=\"tags\">Tags</label>\r\n                            <input type=\"text\" id=\"tags\" className=\"userInput\" required placeholder=\"Separate tags by commas or space\" ref={tags => this.tags = tags} />\r\n\r\n                            <input type=\"submit\" className=\"submit\" value=\"Submit!\"></input>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeCreator;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faThumbsDown, faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faThumbsDown , faThumbsUp } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nlibrary.add(faThumbsDown, faThumbsUp);\r\n\r\n\r\nconst UserMeme = ({ topText, bottomText, tags, image, alt, likes, dislikes, totalVotes, upVoteHandler, propertyKey, downVoteHandler }) => {\r\n\r\n  let memeTags = `${tags}`.replace(/[^a-zA-Z ]/g, \" \");\r\n  let memeAlt = `${alt}`.replace(/[^a-zA-Z ]/g, \" \");\r\n  let memetopText = `${topText}`.replace(/[^a-zA-Z ]/g, \" \");\r\n  let memebottomText = `${bottomText}`.replace(/[^a-zA-Z ]/g, \" \");\r\n\r\n  return (\r\n    <li className={`eachMemeStyleContainer ${memeTags} ${memeAlt} ${memetopText} ${memebottomText} `}>\r\n\r\n      <div>\r\n        <p>{topText}</p>\r\n        <img src={image} alt={memeAlt} />\r\n        <p>{bottomText}</p>\r\n        {/* <p>{tags}</p> */}\r\n      </div>\r\n      \r\n      <div clasName=\"voteBtns\">\r\n        <button aria-label=\"upvote this meme\" onClick={() => { upVoteHandler(propertyKey, likes, totalVotes)}} >\r\n          <p>{likes}</p>\r\n          <FontAwesomeIcon icon={faThumbsUp} />\r\n        </button>\r\n\r\n        <button>{totalVotes}</button>\r\n\r\n        <button aria-label=\"downvote this meme\" onClick={() => { downVoteHandler(propertyKey, dislikes, totalVotes) }} > \r\n          <p>{dislikes}</p>\r\n          <FontAwesomeIcon icon={faThumbsDown} />\r\n        </button>\r\n      </div>\r\n      \r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UserMeme;\r\n","import firebase from \"../firebase.js\";\r\nimport { Component } from \"react\";\r\nimport UserMeme from \"../components/UserMeme.js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faThumbsDown, faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faThumbsDown , faThumbsUp } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nlibrary.add(faThumbsDown, faThumbsUp);\r\n\r\nclass DisplayMeme extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      ogMemeArray: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebase.database().ref();\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (data) => {\r\n      const firebaseDataObj = data.val();\r\n\r\n      let memeArray = [];\r\n\r\n      for (let propertyKey in firebaseDataObj) {\r\n        const formattedObj = {\r\n          propertyKey: propertyKey,\r\n          topText: firebaseDataObj[propertyKey].memeTopText,\r\n          bottomText: firebaseDataObj[propertyKey].memeBottomText,\r\n          image: firebaseDataObj[propertyKey].memeImage,\r\n          alt: firebaseDataObj[propertyKey].memeAltText,\r\n          tags: firebaseDataObj[propertyKey].memeTags,\r\n          date: firebaseDataObj[propertyKey].memeDate,\r\n          likes:firebaseDataObj[propertyKey].memeLikes,\r\n          dislikes:firebaseDataObj[propertyKey].memeDislikes,\r\n          totalVotes: firebaseDataObj[propertyKey].memeTotalVotes,\r\n        };\r\n\r\n        memeArray.push(formattedObj);\r\n\r\n        memeArray.sort(callback);\r\n        function callback(a, b) {\r\n          return new Date(b.date) - new Date(a.date);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        ogMemeArray: memeArray,\r\n      });\r\n    });  \r\n  }\r\n\r\n  upVote = (propertyKey, likes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeLikes: likes + 1,\r\n      memeTotalVotes: totalVotes + 1,\r\n    })\r\n  }\r\n\r\n  downVote = (propertyKey, dislikes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();  \r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeDislikes: dislikes + 1,\r\n      memeTotalVotes: totalVotes - 1,\r\n    })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <button\r\n          onClick={() => {\r\n\r\n            let elements = document.getElementsByClassName(\"eachMemeStyleContainer\");\r\n\r\n            for (let i = 0; i < elements.length; i++) {\r\n              elements[i].style.display = \"none\";\r\n            }\r\n\r\n            let nextElement = document.getElementsByClassName(\"Hair\");\r\n            for (let n = 0; n < nextElement.length; n++) {\r\n              nextElement[n].style.display = \"flex\";\r\n            }\r\n          }}\r\n        >\r\n          Search\r\n        </button>\r\n\r\n        <ul className=\"eachMemeStyle\">\r\n          {this.state.ogMemeArray.map((eachMeme) => {\r\n            return (\r\n                <UserMeme\r\n                  propertyKey={eachMeme.propertyKey}\r\n                  topText={eachMeme.topText}\r\n                  bottomText={eachMeme.bottomText}\r\n                  image={eachMeme.image}\r\n                  alt={eachMeme.alt}\r\n                  tags={eachMeme.tags}\r\n                  likes={eachMeme.likes}\r\n                  dislikes={eachMeme.dislikes}\r\n                  totalVotes={eachMeme.totalVotes}\r\n                  upVoteHandler={this.upVote}\r\n                  downVoteHandler={this.downVote}\r\n                />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayMeme;\r\n","const Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p> {'\\u00A9'} <a href=\"https://junocollege.com/\">Juno College 2020</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Footer from './Footer.js';\r\nimport '../styles/App.scss';\r\nimport MemeCreator from './MemeCreator.js';\r\n\r\nclass SearchGifs extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            displayedGifs: [],\r\n            gifUrl: [],\r\n            gifAlt: [],\r\n        }   \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.giphyTrendingAPICall();\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.giphyAPICall(this.state.userInput);\r\n    }\r\n\r\n\r\n\r\n    giphyAPICall = (query) => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                q: query,\r\n                limit: 50,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n\r\n            if (apiResponse.data.data.length === 0) {\r\n                const errorMsg = [{\r\n                    id: '123ABC',\r\n                    images: {\r\n                        downsized_large: {\r\n                            url: 'https://media1.giphy.com/media/gfO3FcnL8ZK9wVgr6t/giphy.gif?…0f423ee6unrij1gzkfdf27jyfmh9v3oxbgftbq88ajrpq0&rid=giphy.gif'\r\n                        }\r\n                    }\r\n                }]\r\n\r\n                this.setState({\r\n                    displayedGifs: errorMsg\r\n                })\r\n\r\n            } else {\r\n                console.log(apiResponse.data.data);\r\n                this.setState({\r\n                    displayedGifs: apiResponse.data.data,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    giphyTrendingAPICall = () => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/trending',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                limit: 12,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n            this.setState({\r\n                displayedGifs: apiResponse.data.data\r\n            })\r\n        })\r\n    }\r\n\r\n    noScroll() {\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n\r\n    passUrl = (e) => {\r\n        this.setState({\r\n            gifUrl: e.target.src,\r\n            gifAlt: e.target.alt\r\n        })\r\n        document.getElementById('createMemeSection').style.display = 'flex';\r\n        document.getElementById('displayedGifsId').style.marginTop = 0;\r\n        document.getElementById('searchGifId').style.display = 'none';\r\n        window.addEventListener('scroll', this.noScroll)\r\n    }\r\n\r\n\r\n    render() {\r\n        return ( \r\n            <Fragment>\r\n                <section>\r\n                    <form onSubmit={this.handleSubmit} className=\"flexbox\" id=\"searchGifId\">\r\n                        <label htmlFor=\"userGifSearch\" className=\"srOnly\">Search for Gif:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"userGifSearch\"\r\n                            name=\"userGifSearch\"\r\n                            placeholder=\"Search Gifs\"\r\n                            required\r\n                            onChange={this.handleInputChange}\r\n                        />\r\n                        <button>Find Gif</button>\r\n                    </form>\r\n\r\n                    <div>          \r\n                        <MemeCreator \r\n                            gifUrlProps={this.state.gifUrl}\r\n                            gifAltProps={this.state.gifAlt}\r\n                            stopScroll={this.noScroll}\r\n                        />\r\n                    </div>\r\n\r\n                    <ul className=\"gifs flexbox\" id=\"displayedGifsId\">\r\n                        {\r\n                            this.state.displayedGifs.map((trendingGif) => {\r\n                                return (\r\n                                    <li className=\"gifContainer normalPointer\" key={trendingGif.id} >\r\n                                        <img className=\"gifs\" src={trendingGif.images.downsized_large.url} alt={trendingGif.title} onClick={this.passUrl}/>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n\r\n                </section>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchGifs;\r\n","import { Component, Fragment } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Header headerText=\"Meme in a Giffy\" subheaderText=\"\" />\r\n\r\n        <Link to={\"/search\"}>\r\n          <button className=\"glow-on-hover\" type=\"button\">\r\n            Search Memes!\r\n          </button>\r\n        </Link>\r\n\r\n        <Link to={\"/memecreator\"}>\r\n          <button className=\"glow-on-hover\" type=\"button\">\r\n            Create Memes!\r\n          </button>\r\n        </Link>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","\r\nimport { Component, Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport firebase from \"./firebase.js\";\r\nimport \"./styles/App.scss\";\r\nimport axios from \"axios\";\r\nimport Header from \"./components/Header.js\";\r\nimport MemeCreator from \"./components/MemeCreator.js\";\r\nimport DisplayMeme from \"./components/DisplayMeme\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport SearchGifs from \"./components/SearchGifs.js\";\r\nimport Home from \"./components/Home\";\r\n\r\n\r\n/* \r\nComponents to create: \r\nMeme Creation Page\r\n  - User query to get results and display images\r\n    - if no results get found let user know\r\n  - Limit results to 10 \r\n  - When user selects Gif to create meme, window pops open with form and gif\r\n  Custom Meme Component\r\n  - Form has three inputs *all required, and submit button \r\n    - Top text, bottom text, tag(s)\r\n  - On submit, prevent default behaviour and display on page \r\n    - Redirect user to the meme viewing section \r\n    \r\n    \r\nMeme Viewing Section:\r\n  Component for Customized Finished Meme:   \r\n      - User can upvotebpm / downvote\r\n        - Total votes are displayed\r\n      - Save meme for later ( STRETCH GOAL )\r\n  Gallery View on Meme Viewing Section: \r\n    - User query based off of title and tags entered during meme creation \r\n    - display memes onto page based off of the search query above\r\n    - \r\n*/\r\n\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    console.log(`This is your firebase database:`, dbRef);\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Router>\r\n        {/* HEADER SECTION */}\r\n\r\n        {/* <img src={ this.state.images } alt=\"\"/>\r\n        {/* <SearchGifs /> */}\r\n        {/* <img src={this.state.images} alt=\"\" /> */}\r\n        {/* <Route exact path=\"/\" component={ } />\r\n          <Route path=\"\" component ={ } /> */}\r\n\r\n        {/* <Create /> */}\r\n        {/* <DisplayMeme /> */}\r\n\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/memecreator\" component={SearchGifs} />\r\n        <Route path=\"/search\" component={DisplayMeme} />\r\n\r\n        {/* FOOTER SECTION */}\r\n\r\n        <Footer />\r\n\r\n      </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}