[{"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\index.js":"1","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\App.js":"2","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\reportWebVitals.js":"3","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\firebase.js":"4","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Footer.js":"5","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Header.js":"6","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\MemeCreator.js":"7","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\SearchGifs.js":"8","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Home.js":"9","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\DisplayMeme.js":"10","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\UserMeme.js":"11"},{"size":494,"mtime":1607483426677,"results":"12","hashOfConfig":"13"},{"size":2316,"mtime":1607619834726,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1607483426678,"results":"15","hashOfConfig":"13"},{"size":607,"mtime":1607483426675,"results":"16","hashOfConfig":"13"},{"size":198,"mtime":1607483426670,"results":"17","hashOfConfig":"13"},{"size":401,"mtime":1607635510506,"results":"18","hashOfConfig":"13"},{"size":5653,"mtime":1607636022540,"results":"19","hashOfConfig":"13"},{"size":6757,"mtime":1607636102735,"results":"20","hashOfConfig":"13"},{"size":646,"mtime":1607544765807,"results":"21","hashOfConfig":"13"},{"size":3578,"mtime":1607635510504,"results":"22","hashOfConfig":"13"},{"size":1587,"mtime":1607635510516,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1abrgbo",{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\index.js",[],["51","52"],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\App.js",["53","54","55","56"],"\r\nimport { Component, Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport firebase from \"./firebase.js\";\r\nimport \"./styles/App.scss\";\r\nimport axios from \"axios\";\r\nimport Header from \"./components/Header.js\";\r\nimport MemeCreator from \"./components/MemeCreator.js\";\r\nimport DisplayMeme from \"./components/DisplayMeme\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport SearchGifs from \"./components/SearchGifs.js\";\r\nimport Home from \"./components/Home\";\r\n\r\n\r\n/* \r\nComponents to create: \r\nMeme Creation Page\r\n  - User query to get results and display images\r\n    - if no results get found let user know\r\n  - Limit results to 10 \r\n  - When user selects Gif to create meme, window pops open with form and gif\r\n  Custom Meme Component\r\n  - Form has three inputs *all required, and submit button \r\n    - Top text, bottom text, tag(s)\r\n  - On submit, prevent default behaviour and display on page \r\n    - Redirect user to the meme viewing section \r\n    \r\n    \r\nMeme Viewing Section:\r\n  Component for Customized Finished Meme:   \r\n      - User can upvotebpm / downvote\r\n        - Total votes are displayed\r\n      - Save meme for later ( STRETCH GOAL )\r\n  Gallery View on Meme Viewing Section: \r\n    - User query based off of title and tags entered during meme creation \r\n    - display memes onto page based off of the search query above\r\n    - \r\n*/\r\n\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    console.log(`This is your firebase database:`, dbRef);\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Router>\r\n        {/* HEADER SECTION */}\r\n\r\n        {/* <img src={ this.state.images } alt=\"\"/>\r\n        {/* <SearchGifs /> */}\r\n        {/* <img src={this.state.images} alt=\"\" /> */}\r\n        {/* <Route exact path=\"/\" component={ } />\r\n          <Route path=\"\" component ={ } /> */}\r\n\r\n        {/* <Create /> */}\r\n        {/* <DisplayMeme /> */}\r\n\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/memecreator\" component={SearchGifs} />\r\n        <Route path=\"/search\" component={DisplayMeme} />\r\n\r\n        {/* FOOTER SECTION */}\r\n\r\n        <Footer />\r\n\r\n      </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\reportWebVitals.js",[],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\firebase.js",[],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Footer.js",[],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Header.js",[],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\MemeCreator.js",["57"],"\r\nimport { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from '../firebase.js';\r\n\r\nclass MemeCreator extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userMemes:'',\r\n            userTopText: '',\r\n            userBottomText: '',\r\n            likes: 0,\r\n            dislikes: 0,\r\n            total: 0\r\n        }\r\n    }\r\n\r\n    handleInputChangeTopText = (e) => {\r\n        this.setState({\r\n            userTopText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleInputChangeBottomText = (e) => {\r\n        this.setState({\r\n            userBottomText: e.target.value\r\n        })\r\n    }\r\n\r\n    userGeneratedMemes = (e) =>{\r\n        e.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        const time = document.getElementById('date').value = Date();\r\n\r\n        const userTagsInput = this.tags.value;\r\n        const userMemeTags = userTagsInput.split(/[\\s,]+/);\r\n        const userMeme = {\r\n            memeImage:this.props.gifUrlProps,\r\n            memeAltText:this.props.gifAltProps,\r\n            memeDate:time,\r\n            memeTopText:this.topText.value,\r\n            memeBottomText:this.bottomText.value,\r\n            memeTags:userMemeTags,\r\n            memeLikes:this.state.likes,\r\n            memeDislikes: this.state.dislikes, \r\n            memeTotalVotes:this.state.total,\r\n        }\r\n\r\n        this.topText.value = ''\r\n        this.bottomText.value = ''\r\n        this.tags.value = ''\r\n\r\n        dbRef.push(userMeme);\r\n\r\n        this.setState({\r\n            userMemes:userMeme,\r\n        })\r\n    }\r\n\r\n    hideCreateMemeSection = (e) => {\r\n        if (e.target.id === \"createMemeSection\") {\r\n            document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n            document.getElementById('header').style.display = 'flex';\r\n            document.getElementById('displayedGifsId').style.marginTop = '20px'; \r\n            document.getElementById('searchGifId').style.display = 'flex';\r\n            document.getElementById('root').style.backgroundColor = 'rgb(40,40,40)';\r\n        }\r\n    }\r\n\r\n    closeMemeSection = () => {\r\n        document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n        document.getElementById('header').style.display = 'flex';\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('root').style.backgroundColor = 'rgb(40,40,40)';\r\n    }\r\n\r\n    clearMemeForm = () =>{\r\n\r\n        document.getElementById(\"selectedGif\").style.display = \"none\";\r\n        document.getElementById(\"createMemeForm\").style.display = \"none\";\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('postCreationMeme').style.display = 'block';\r\n\r\n        // alert(`You just created a meme!` );\r\n\r\n        // document.getElementById(\"gifAndForm\").text(<a href=\"#\">Click here to view your meme!</a>)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"createMemeSection\" id=\"createMemeSection\" onClick={this.hideCreateMemeSection}>\r\n\r\n                <div className=\"wrapperCreateMemePage\">\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"closeMemeButton\" onClick={this.closeMemeSection}>X</button>\r\n                    </div>\r\n\r\n                    <div className=\"gifAndForm\" id=\"gifAndForm\">\r\n\r\n                        <div className=\"selectedGif\" id=\"selectedGif\">\r\n                            <h5 className=\"memeText memeTextTop\">{this.state.userTopText}</h5>\r\n                            <img src={this.props.gifUrlProps} alt={this.props.gifAltProps} />\r\n                            <h5 className=\"memeText memeTextBottom\">{this.state.userBottomText}</h5>\r\n                        </div>\r\n\r\n                        <div id=\"postCreationMeme\">\r\n                            <Link to={\"/search\"}>\r\n                                <button className=\"glow-on-hover\" type=\"button\">\r\n                                    Search Memes!\r\n                                </button>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <form action=\"\" onSubmit={this.userGeneratedMemes} className=\"createMemeForm\" id=\"createMemeForm\">\r\n\r\n                            <input className=\"srOnly\" id=\"date\" name=\"date\" className=\"hiddenDate\"></input>\r\n\r\n                            <label htmlFor=\"topText\">Top Text</label>\r\n                            <input type=\"text\" id=\"topText\" className=\"userInput\" required placeholder=\"Top Text\" maxLength=\"30\" ref={top => this.topText = top} onChange={this.handleInputChangeTopText}/>\r\n\r\n                            <label htmlFor=\"bottomText\">Bottom Text</label>\r\n                            <input type=\"text\" id=\"bottomText\" className=\"userInput\" required placeholder=\"Bottom Text\" maxLength=\"30\" ref={bottom => this.bottomText = bottom} onChange={this.handleInputChangeBottomText}/>\r\n\r\n                            <label htmlFor=\"tags\">Tags</label>\r\n                            <input type=\"text\" id=\"tags\" className=\"userInput\" required placeholder=\"Separate tags by commas or spaces\" ref={tags => this.tags = tags} />\r\n\r\n                            <input type=\"submit\" className=\"submit\" value=\"Submit!\" onClick={this.clearMemeForm}></input>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeCreator;\r\n","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\SearchGifs.js",["58","59"],"// importing npm installs\r\nimport { Component, Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// importing created pages & styles\r\nimport MemeCreator from './MemeCreator.js';\r\nimport Header from './Header.js';\r\nimport '../styles/App.scss';\r\n\r\n\r\nclass SearchGifs extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            displayedGifs: [],\r\n            gifUrl: [],\r\n            gifAlt: [],\r\n        }   \r\n    }\r\n\r\n    // On mount, run axios (api call) function to display all the currently trending Gifs\r\n    componentDidMount() {\r\n        this.giphyTrendingAPICall();\r\n    }\r\n\r\n    // When search field (Search Gifs Field) is being used, update state to record string value\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    // When user submits search query by pressing button (Find Gif Button), run axios (giphyAPICall) function that takes the userInput value from the search field and uses it in the api query field\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.giphyAPICall(this.state.userInput);\r\n    }\r\n\r\n\r\n\r\n    giphyAPICall = (query) => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                q: query,\r\n                limit: 50,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n\r\n            if (apiResponse.data.data.length === 0) {\r\n                const errorMsg = [{\r\n                    id: '123ABC',\r\n                    images: {\r\n                        downsized_large: {\r\n                            url: 'https://media1.giphy.com/media/gfO3FcnL8ZK9wVgr6t/giphy.gif?…0f423ee6unrij1gzkfdf27jyfmh9v3oxbgftbq88ajrpq0&rid=giphy.gif'\r\n                        }\r\n                    }\r\n                }]\r\n\r\n                this.setState({\r\n                    displayedGifs: errorMsg\r\n                })\r\n\r\n            } else {\r\n                console.log(apiResponse.data.data);\r\n                this.setState({\r\n                    displayedGifs: apiResponse.data.data,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    giphyTrendingAPICall = () => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/trending',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                limit: 12,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n            this.setState({\r\n                displayedGifs: apiResponse.data.data\r\n            })\r\n        })\r\n    }\r\n\r\n    passUrl = (e) => {\r\n        this.setState({\r\n            gifUrl: e.target.src,\r\n            gifAlt: e.target.alt\r\n        })\r\n        document.getElementById('createMemeSection').style.display = 'flex';\r\n        document.getElementById(\"selectedGif\").style.display = 'flex';\r\n        document.getElementById(\"createMemeForm\").style.display =  'flex';\r\n        document.getElementById('displayedGifsId').style.marginTop = 0;\r\n        document.getElementById('root').style.backgroundColor = 'rgba(1, 1, 1, 0.9)';\r\n        document.getElementById('searchGifId').style.display = 'none';\r\n        document.getElementById('header').style.display = 'none';\r\n        document.getElementById('postCreationMeme').style.display = 'none';\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Header headerText=\"Meme in a Giffy\" subheaderText=\"Search for Gifs to create your very own meme!\" />\r\n\r\n                <section className=\"wrapper\" id=\"wrapper\">\r\n\r\n                    <div className=\"flexboxSearchGifs\" id=\"searchGifId\" >\r\n                    <form onSubmit={this.handleSubmit} className=\"flexbox searchGifForm\" >\r\n\r\n                        <label htmlFor=\"userGifSearch\" className=\"srOnly\">Search for Gif:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"userGifSearch\"\r\n                            name=\"userGifSearch\"\r\n                            placeholder=\"Search Gifs\"\r\n                            required\r\n                            onChange={this.handleInputChange}\r\n                        />\r\n                        <button >Find Gif</button>\r\n\r\n\r\n                    </form>\r\n                    <div className=\"viewMemesButtonContainer\">\r\n                            <Link to={\"/search\"}>\r\n                                <button className=\"glow-on-hover\" type=\"button\">View Created Memes</button>\r\n                            </Link>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                    <div>          \r\n                        <MemeCreator \r\n                            gifUrlProps={this.state.gifUrl}\r\n                            gifAltProps={this.state.gifAlt}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <ul className=\"gifs flexbox\" id=\"displayedGifsId\">\r\n                        {\r\n                            this.state.displayedGifs.map((eachGif) => {\r\n                                // Conditional statement to check the id of the gif - if id of gif matches id for 'no results found' then return some additional text, else display all gifs with matching query\r\n                                if (eachGif.id === '123ABC') {\r\n                                    return (\r\n                                        <li className=\"gifContainer noPointer\" key={eachGif.id} >\r\n                                            <p className=\"noGifFoundText\">Sorry No GIFs found, search again!</p>\r\n                                            <img src={eachGif.images.downsized_large.url} alt={eachGif.title}/>\r\n                                        </li>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <li className=\"gifContainer normalPointer\" key={eachGif.id} >\r\n                                            <img className=\"gifs\" src={eachGif.images.downsized_large.url} alt={eachGif.title} onClick={this.passUrl} />\r\n                                        </li>\r\n                                    )\r\n                                }\r\n  \r\n                            })\r\n                        }\r\n                    </ul>\r\n\r\n                </section>\r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchGifs;\r\n","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\Home.js",[],"C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\DisplayMeme.js",["60"],"import firebase from \"../firebase.js\";\r\nimport { Component } from \"react\";\r\nimport UserMeme from \"../components/UserMeme.js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faThumbsDown, faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faThumbsDown , faThumbsUp } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nlibrary.add(faThumbsDown, faThumbsUp);\r\n\r\nclass DisplayMeme extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      ogMemeArray: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebase.database().ref();\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (data) => {\r\n      const firebaseDataObj = data.val();\r\n\r\n      let memeArray = [];\r\n\r\n      for (let propertyKey in firebaseDataObj) {\r\n        const formattedObj = {\r\n          propertyKey: propertyKey,\r\n          topText: firebaseDataObj[propertyKey].memeTopText,\r\n          bottomText: firebaseDataObj[propertyKey].memeBottomText,\r\n          image: firebaseDataObj[propertyKey].memeImage,\r\n          alt: firebaseDataObj[propertyKey].memeAltText,\r\n          tags: firebaseDataObj[propertyKey].memeTags,\r\n          date: firebaseDataObj[propertyKey].memeDate,\r\n          likes:firebaseDataObj[propertyKey].memeLikes,\r\n          dislikes:firebaseDataObj[propertyKey].memeDislikes,\r\n          totalVotes: firebaseDataObj[propertyKey].memeTotalVotes,\r\n        };\r\n\r\n        memeArray.push(formattedObj);\r\n\r\n        memeArray.sort(callback);\r\n        function callback(a, b) {\r\n          return new Date(b.date) - new Date(a.date);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        ogMemeArray: memeArray,\r\n      });\r\n    });  \r\n  }\r\n\r\n  upVote = (propertyKey, likes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeLikes: likes + 1,\r\n      memeTotalVotes: totalVotes + 1,\r\n    })\r\n  }\r\n\r\n  downVote = (propertyKey, dislikes, totalVotes) => {\r\n    const dbRef = firebase.database().ref();  \r\n\r\n    dbRef.child(propertyKey).update({\r\n      memeDislikes: dislikes + 1,\r\n      memeTotalVotes: totalVotes - 1,\r\n    })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <button\r\n          onClick={() => {\r\n\r\n            let elements = document.getElementsByClassName(\"eachMemeStyleContainer\");\r\n\r\n            for (let i = 0; i < elements.length; i++) {\r\n              elements[i].style.display = \"none\";\r\n            }\r\n\r\n            let nextElement = document.getElementsByClassName(\"Hair\");\r\n            for (let n = 0; n < nextElement.length; n++) {\r\n              nextElement[n].style.display = \"flex\";\r\n            }\r\n          }}\r\n        >\r\n          Search\r\n        </button>\r\n\r\n        <ul className=\"eachMemeStyle\">\r\n          {this.state.ogMemeArray.map((eachMeme) => {\r\n            return (\r\n                <UserMeme\r\n                  propertyKey={eachMeme.propertyKey}\r\n                  topText={eachMeme.topText}\r\n                  bottomText={eachMeme.bottomText}\r\n                  image={eachMeme.image}\r\n                  alt={eachMeme.alt}\r\n                  tags={eachMeme.tags}\r\n                  likes={eachMeme.likes}\r\n                  dislikes={eachMeme.dislikes}\r\n                  totalVotes={eachMeme.totalVotes}\r\n                  upVoteHandler={this.upVote}\r\n                  downVoteHandler={this.downVote}\r\n                />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayMeme;\r\n","C:\\Users\\Hans Christian\\Desktop\\Bootcamp\\sites\\juno\\projects\\meme-in-a-giffy\\project6AmandaHansChristianBenZahra\\src\\components\\UserMeme.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":21,"nodeType":"67","messageId":"68","endLine":2,"endColumn":29},{"ruleId":"65","severity":1,"message":"69","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":13},{"ruleId":"65","severity":1,"message":"70","line":7,"column":8,"nodeType":"67","messageId":"68","endLine":7,"endColumn":14},{"ruleId":"65","severity":1,"message":"71","line":8,"column":8,"nodeType":"67","messageId":"68","endLine":8,"endColumn":19},{"ruleId":"72","severity":1,"message":"73","line":122,"column":77,"nodeType":"74","endLine":122,"endColumn":99},{"ruleId":"65","severity":1,"message":"75","line":3,"column":27,"nodeType":"67","messageId":"68","endLine":3,"endColumn":33},{"ruleId":"65","severity":1,"message":"76","line":3,"column":35,"nodeType":"67","messageId":"68","endLine":3,"endColumn":40},{"ruleId":"65","severity":1,"message":"77","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":25},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Header' is defined but never used.","'MemeCreator' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Router' is defined but never used.","'Route' is defined but never used.","'FontAwesomeIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]