[{"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\index.js":"1","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\App.js":"2","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\reportWebVitals.js":"3","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\firebase.js":"4","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\MemeCreator.js":"5","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Header.js":"6","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Footer.js":"7","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\SearchGifs.js":"8","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\DisplayMeme.js":"9","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Home.js":"10","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\UserMeme.js":"11"},{"size":494,"mtime":1607391493872,"results":"12","hashOfConfig":"13"},{"size":1760,"mtime":1607646498868,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1607391493873,"results":"15","hashOfConfig":"13"},{"size":607,"mtime":1607391493870,"results":"16","hashOfConfig":"13"},{"size":5653,"mtime":1607636359143,"results":"17","hashOfConfig":"13"},{"size":391,"mtime":1607639652334,"results":"18","hashOfConfig":"13"},{"size":460,"mtime":1607642740071,"results":"19","hashOfConfig":"13"},{"size":6757,"mtime":1607637102780,"results":"20","hashOfConfig":"13"},{"size":4550,"mtime":1607647318502,"results":"21","hashOfConfig":"13"},{"size":659,"mtime":1607646835952,"results":"22","hashOfConfig":"13"},{"size":1646,"mtime":1607647678461,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"i38qo",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\index.js",[],["49","50"],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\App.js",["51","52","53","54","55"],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\reportWebVitals.js",[],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\firebase.js",[],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\MemeCreator.js",["56"],"\r\nimport { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from '../firebase.js';\r\n\r\nclass MemeCreator extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userMemes:'',\r\n            userTopText: '',\r\n            userBottomText: '',\r\n            likes: 0,\r\n            dislikes: 0,\r\n            total: 0\r\n        }\r\n    }\r\n\r\n    handleInputChangeTopText = (e) => {\r\n        this.setState({\r\n            userTopText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleInputChangeBottomText = (e) => {\r\n        this.setState({\r\n            userBottomText: e.target.value\r\n        })\r\n    }\r\n\r\n    userGeneratedMemes = (e) =>{\r\n        e.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        const time = document.getElementById('date').value = Date();\r\n\r\n        const userTagsInput = this.tags.value;\r\n        const userMemeTags = userTagsInput.split(/[\\s,]+/);\r\n        const userMeme = {\r\n            memeImage:this.props.gifUrlProps,\r\n            memeAltText:this.props.gifAltProps,\r\n            memeDate:time,\r\n            memeTopText:this.topText.value,\r\n            memeBottomText:this.bottomText.value,\r\n            memeTags:userMemeTags,\r\n            memeLikes:this.state.likes,\r\n            memeDislikes: this.state.dislikes, \r\n            memeTotalVotes:this.state.total,\r\n        }\r\n\r\n        this.topText.value = ''\r\n        this.bottomText.value = ''\r\n        this.tags.value = ''\r\n\r\n        dbRef.push(userMeme);\r\n\r\n        this.setState({\r\n            userMemes:userMeme,\r\n        })\r\n    }\r\n\r\n    hideCreateMemeSection = (e) => {\r\n        if (e.target.id === \"createMemeSection\") {\r\n            document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n            document.getElementById('header').style.display = 'flex';\r\n            document.getElementById('displayedGifsId').style.marginTop = '20px'; \r\n            document.getElementById('searchGifId').style.display = 'flex';\r\n            document.getElementById('root').style.backgroundColor = 'rgb(40,40,40)';\r\n        }\r\n    }\r\n\r\n    closeMemeSection = () => {\r\n        document.getElementById(\"createMemeSection\").style.display = \"none\";\r\n        document.getElementById('header').style.display = 'flex';\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('root').style.backgroundColor = 'rgb(40,40,40)';\r\n    }\r\n\r\n    clearMemeForm = () =>{\r\n\r\n        document.getElementById(\"selectedGif\").style.display = \"none\";\r\n        document.getElementById(\"createMemeForm\").style.display = \"none\";\r\n        document.getElementById('displayedGifsId').style.marginTop = '20px';\r\n        document.getElementById('searchGifId').style.display = 'flex';\r\n        document.getElementById('postCreationMeme').style.display = 'block';\r\n\r\n        // alert(`You just created a meme!` );\r\n\r\n        // document.getElementById(\"gifAndForm\").text(<a href=\"#\">Click here to view your meme!</a>)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"createMemeSection\" id=\"createMemeSection\" onClick={this.hideCreateMemeSection}>\r\n\r\n                <div className=\"wrapperCreateMemePage\">\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"closeMemeButton\" onClick={this.closeMemeSection}>X</button>\r\n                    </div>\r\n\r\n                    <div className=\"gifAndForm\" id=\"gifAndForm\">\r\n\r\n                        <div className=\"selectedGif\" id=\"selectedGif\">\r\n                            <h5 className=\"memeText memeTextTop\">{this.state.userTopText}</h5>\r\n                            <img src={this.props.gifUrlProps} alt={this.props.gifAltProps} />\r\n                            <h5 className=\"memeText memeTextBottom\">{this.state.userBottomText}</h5>\r\n                        </div>\r\n\r\n                        <div id=\"postCreationMeme\">\r\n                            <Link to={\"/search\"}>\r\n                                <button className=\"glow-on-hover\" type=\"button\">\r\n                                    Search Memes!\r\n                                </button>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <form action=\"\" onSubmit={this.userGeneratedMemes} className=\"createMemeForm\" id=\"createMemeForm\">\r\n\r\n                            <input className=\"srOnly\" id=\"date\" name=\"date\" className=\"hiddenDate\"></input>\r\n\r\n                            <label htmlFor=\"topText\">Top Text</label>\r\n                            <input type=\"text\" id=\"topText\" className=\"userInput\" required placeholder=\"Top Text\" maxLength=\"30\" ref={top => this.topText = top} onChange={this.handleInputChangeTopText}/>\r\n\r\n                            <label htmlFor=\"bottomText\">Bottom Text</label>\r\n                            <input type=\"text\" id=\"bottomText\" className=\"userInput\" required placeholder=\"Bottom Text\" maxLength=\"30\" ref={bottom => this.bottomText = bottom} onChange={this.handleInputChangeBottomText}/>\r\n\r\n                            <label htmlFor=\"tags\">Tags</label>\r\n                            <input type=\"text\" id=\"tags\" className=\"userInput\" required placeholder=\"Separate tags by commas or spaces\" ref={tags => this.tags = tags} />\r\n\r\n                            <input type=\"submit\" className=\"submit\" value=\"Submit!\" onClick={this.clearMemeForm}></input>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeCreator;\r\n","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Header.js",[],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Footer.js",[],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\SearchGifs.js",["57","58"],"// importing npm installs\r\nimport { Component, Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// importing created pages & styles\r\nimport MemeCreator from './MemeCreator.js';\r\nimport Header from './Header.js';\r\nimport '../styles/App.scss';\r\n\r\n\r\nclass SearchGifs extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            displayedGifs: [],\r\n            gifUrl: [],\r\n            gifAlt: [],\r\n        }   \r\n    }\r\n\r\n    // On mount, run axios (api call) function to display all the currently trending Gifs\r\n    componentDidMount() {\r\n        this.giphyTrendingAPICall();\r\n    }\r\n\r\n    // When search field (Search Gifs Field) is being used, update state to record string value\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    // When user submits search query by pressing button (Find Gif Button), run axios (giphyAPICall) function that takes the userInput value from the search field and uses it in the api query field\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.giphyAPICall(this.state.userInput);\r\n    }\r\n\r\n\r\n\r\n    giphyAPICall = (query) => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                q: query,\r\n                limit: 50,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n\r\n            if (apiResponse.data.data.length === 0) {\r\n                const errorMsg = [{\r\n                    id: '123ABC',\r\n                    images: {\r\n                        downsized_large: {\r\n                            url: 'https://media1.giphy.com/media/gfO3FcnL8ZK9wVgr6t/giphy.gif?…0f423ee6unrij1gzkfdf27jyfmh9v3oxbgftbq88ajrpq0&rid=giphy.gif'\r\n                        }\r\n                    }\r\n                }]\r\n\r\n                this.setState({\r\n                    displayedGifs: errorMsg\r\n                })\r\n\r\n            } else {\r\n                console.log(apiResponse.data.data);\r\n                this.setState({\r\n                    displayedGifs: apiResponse.data.data,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    giphyTrendingAPICall = () => {\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/trending',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                api_key: 'AiDUd8ngqnIcqZ5dXnGV8r4Aymleu4wa',\r\n                limit: 12,\r\n                rating: 'g'\r\n            }\r\n        }).then((apiResponse) => {\r\n            this.setState({\r\n                displayedGifs: apiResponse.data.data\r\n            })\r\n        })\r\n    }\r\n\r\n    passUrl = (e) => {\r\n        this.setState({\r\n            gifUrl: e.target.src,\r\n            gifAlt: e.target.alt\r\n        })\r\n        document.getElementById('createMemeSection').style.display = 'flex';\r\n        document.getElementById(\"selectedGif\").style.display = 'flex';\r\n        document.getElementById(\"createMemeForm\").style.display =  'flex';\r\n        document.getElementById('displayedGifsId').style.marginTop = 0;\r\n        document.getElementById('root').style.backgroundColor = 'rgba(1, 1, 1, 0.9)';\r\n        document.getElementById('searchGifId').style.display = 'none';\r\n        document.getElementById('header').style.display = 'none';\r\n        document.getElementById('postCreationMeme').style.display = 'none';\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Header headerText=\"Meme in a Giffy\" subheaderText=\"Search for Gifs to create your very own meme!\" />\r\n\r\n                <section className=\"wrapper\" id=\"wrapper\">\r\n\r\n                    <div className=\"flexboxSearchGifs\" id=\"searchGifId\" >\r\n                    <form onSubmit={this.handleSubmit} className=\"flexbox searchGifForm\" >\r\n\r\n                        <label htmlFor=\"userGifSearch\" className=\"srOnly\">Search for Gif:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"userGifSearch\"\r\n                            name=\"userGifSearch\"\r\n                            placeholder=\"Search Gifs\"\r\n                            required\r\n                            onChange={this.handleInputChange}\r\n                        />\r\n                        <button >Find Gif</button>\r\n\r\n\r\n                    </form>\r\n                    <div className=\"viewMemesButtonContainer\">\r\n                            <Link to={\"/search\"}>\r\n                                <button className=\"glow-on-hover\" type=\"button\">View Created Memes</button>\r\n                            </Link>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                    <div>          \r\n                        <MemeCreator \r\n                            gifUrlProps={this.state.gifUrl}\r\n                            gifAltProps={this.state.gifAlt}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <ul className=\"gifs flexbox\" id=\"displayedGifsId\">\r\n                        {\r\n                            this.state.displayedGifs.map((eachGif) => {\r\n                                // Conditional statement to check the id of the gif - if id of gif matches id for 'no results found' then return some additional text, else display all gifs with matching query\r\n                                if (eachGif.id === '123ABC') {\r\n                                    return (\r\n                                        <li className=\"gifContainer noPointer\" key={eachGif.id} >\r\n                                            <p className=\"noGifFoundText\">Sorry No GIFs found, search again!</p>\r\n                                            <img src={eachGif.images.downsized_large.url} alt={eachGif.title}/>\r\n                                        </li>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <li className=\"gifContainer normalPointer\" key={eachGif.id} >\r\n                                            <img className=\"gifs\" src={eachGif.images.downsized_large.url} alt={eachGif.title} onClick={this.passUrl} />\r\n                                        </li>\r\n                                    )\r\n                                }\r\n  \r\n                            })\r\n                        }\r\n                    </ul>\r\n\r\n                </section>\r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchGifs;\r\n","C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\DisplayMeme.js",["59"],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\Home.js",["60"],"C:\\Users\\a3mon\\OneDrive\\Desktop\\JunoBootcampFall2020\\Projects\\project6AmandaHansChristianBenZahra\\src\\components\\UserMeme.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":21,"nodeType":"67","messageId":"68","endLine":1,"endColumn":29},{"ruleId":"65","severity":1,"message":"69","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":16},{"ruleId":"65","severity":1,"message":"70","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":13},{"ruleId":"65","severity":1,"message":"71","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":14},{"ruleId":"65","severity":1,"message":"72","line":7,"column":8,"nodeType":"67","messageId":"68","endLine":7,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":122,"column":77,"nodeType":"75","endLine":122,"endColumn":99},{"ruleId":"65","severity":1,"message":"76","line":3,"column":27,"nodeType":"67","messageId":"68","endLine":3,"endColumn":33},{"ruleId":"65","severity":1,"message":"77","line":3,"column":35,"nodeType":"67","messageId":"68","endLine":3,"endColumn":40},{"ruleId":"65","severity":1,"message":"78","line":5,"column":10,"nodeType":"67","messageId":"68","endLine":5,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":1,"column":21,"nodeType":"67","messageId":"68","endLine":1,"endColumn":29},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'axios' is defined but never used.","'Header' is defined but never used.","'MemeCreator' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Router' is defined but never used.","'Route' is defined but never used.","'FontAwesomeIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]
